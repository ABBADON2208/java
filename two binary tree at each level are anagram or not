import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;
  
  
public class GFG 
{                                 
    // A Binary Tree Node
    static class Node
    {
        Node left, right;
        int data;
        Node(int data){
            this.data = data;
            left = null;
            right = null;
        }
    }
      

    public static boolean areAnagrams(Node root1,Node root2)
    {
      if(root1==null && root2==null)
        return true;

      if(root1!=null && root2==null)
        return false;

      if(root1==null && root2!=null)
        return false;
   
      Queue<Node> list1 = new LinkedList<Node>();
      Queue<Node> list2 = new LinkedList<Node>();
      ArrayList<Integer> store1 = new ArrayList<Integer>();
      ArrayList<Integer> store2 = new ArrayList<Integer>();
      int number1=0;
      int number2=0;
     
      list1.add(root1);
      list1.add(null);
      list2.add(root2);
      list2.add(null);

      while(!list1.isEmpty() && !list2.isEmpty())
      {

         Node temp1 = list1.peek();
         list1.remove();

         Node temp2 = list2.peek();
         list2.remove();

         if(temp1!=null)
         {
            store1.add(temp1.data);
            number1++;

            if(temp1.left!=null)
                list1.add(temp1.left);

            if(temp1.right!=null)
                list1.add(temp1.right);
         }

         else
         {
            if(!list1.isEmpty())
                list1.add(null);
         }

         if(temp2!=null)
         {
            store2.add(temp2.data);
            number2++;

            if(temp2.left!=null)
                list2.add(temp2.left);

            if(temp2.right!=null)
                list2.add(temp2.right);
         }

         else
         {
            if(number1!=number2)
                return false;

            number1=0;
            number2=0;

            Collections.sort(store1);
            Collections.sort(store2);

            if(!store1.equals(store2))
                return false;

            store1.clear();
            store2.clear();

            if(!list2.isEmpty())
                list2.add(null);
         }
      }

        if(list1.size()!=list2.size())
            return false;

         return true;
    }


    // Driver program to test above functions
    public static void main(String args[])
    {
        // Constructing both the trees.
        Node root1 = new Node(1);
        root1.left = new Node(3);
        root1.right = new Node(2);
        root1.right.left = new Node(5);
        root1.right.right = new Node(4);
        root1.right.left.left = new Node(6);
        root1.right.left.right = new Node(7);
       
        Node root2 = new Node(1);
        root2.left = new Node(2);
        root2.right = new Node(3);
        root2.left.left = new Node(4);
        root2.left.right = new Node(5);
        root2.left.left.left = new Node(6);
        root2.left.left.right = new Node(7);
        root2.left.left.left.left = new Node(8);
        root2.left.left.right.right = new Node(9);
          
        System.out.println(areAnagrams(root1, root2)?
                             "Yes" : "No");
    }
}
